[build-system]
requires = [
    "setuptools>=65.0",
    "wheel",
    "build>=0.8.0",
    # Suspicious build-time dependencies (should be flagged)
    "internal-build-tools==2.1.0",        # Internal build utilities
    "company-code-generator>=1.5.0",      # Private code generation tool
    "enterprise-asset-bundler==0.9.3",    # Enterprise asset bundler
    "org-proto-compiler>=2.0.0",          # Organization protocol compiler
    "private-schema-validator==1.3.1"     # Private schema validation
]
build-backend = "setuptools.build_meta"

[project]
name = "dependency-confusion-test"
version = "1.0.0"
description = "Comprehensive test project for dependency confusion detection"
authors = [
    {name = "Security Tester", email = "security@testcompany.com"}
]
readme = "README.md" 
license = {text = "MIT"}
requires-python = ">=3.8"

# Main project dependencies - mix of legitimate and suspicious
dependencies = [
    # Legitimate packages
    "requests>=2.28.0",
    "numpy>=1.21.0",
    "pandas>=1.4.0",
    "fastapi>=0.85.0",
    "sqlalchemy>=1.4.0",
    "pydantic>=1.10.0",
    
    # Suspicious internal packages (should be flagged)
    "company-user-service==3.2.1",        # Internal user management
    "internal-payment-processor>=2.5.0",   # Payment processing service
    "org-notification-gateway==1.8.4",     # Notification gateway
    "private-audit-logger>=1.2.0",         # Audit logging service
    "enterprise-cache-manager==2.0.5",     # Enterprise caching
    "custom-auth-provider>=3.1.0",         # Custom authentication
    "internal-data-pipeline==1.7.2",       # Data pipeline tools
    "company-config-loader>=0.9.8",        # Configuration loader
    "private-encryption-lib==2.3.4",       # Encryption library
    "org-telemetry-collector>=1.4.1"       # Telemetry collection
]

[project.optional-dependencies]
# Development dependencies group
dev = [
    "pytest>=7.1.0",
    "pytest-cov>=3.0.0",
    "black>=22.0.0",
    "flake8>=5.0.0",
    "mypy>=0.991",
    
    # Suspicious dev dependencies (should be flagged)
    "internal-test-fixtures>=2.0.0",       # Internal testing fixtures
    "company-mock-services==1.3.5",        # Mock services for testing
    "private-dev-utilities>=1.1.2",        # Private development utilities
    "org-debug-tools==2.4.0",              # Organization debug tools
    "enterprise-test-runner>=1.6.3"        # Enterprise test runner
]

# Testing dependencies group
testing = [
    "pytest>=7.1.0",
    "pytest-asyncio>=0.19.0",
    "coverage>=6.4.0",
    "factory-boy>=3.2.0",
    "faker>=15.0.0",
    
    # Suspicious testing dependencies (should be flagged)
    "internal-test-database>=3.1.0",       # Internal test database
    "company-fixture-generator==1.2.7",    # Fixture generation tool
    "private-test-data-seeder>=2.0.5",     # Test data seeding
    "org-performance-profiler==1.9.1",     # Performance profiling
    "enterprise-load-tester>=1.5.4"        # Load testing tools
]

# Production dependencies group
production = [
    "gunicorn>=20.1.0",
    "uvicorn>=0.18.0",
    "redis>=4.3.0",
    "celery>=5.2.0",
    "prometheus-client>=0.14.0",
    
    # Suspicious production dependencies (should be flagged)
    "internal-monitoring-agent>=4.2.0",    # Internal monitoring
    "company-deployment-manager==2.8.1",   # Deployment management
    "private-health-checker>=1.4.3",       # Health checking service
    "org-backup-service==3.0.2",           # Backup service
    "enterprise-log-shipper>=2.1.8"        # Log shipping service
]

# Documentation dependencies group  
docs = [
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.0.0",
    "myst-parser>=0.18.0",
    
    # Suspicious documentation dependencies (should be flagged)
    "internal-doc-generator>=1.3.0",       # Internal documentation generator
    "company-style-guide==0.8.2",          # Company style guide
    "private-api-documenter>=2.1.4"        # API documentation tool
]

# Machine Learning dependencies group
ml = [
    "scikit-learn>=1.1.0",
    "tensorflow>=2.9.0", 
    "torch>=1.12.0",
    "transformers>=4.21.0",
    
    # Suspicious ML dependencies (should be flagged)
    "internal-ml-models>=5.3.2",           # Internal ML models
    "company-feature-store==1.7.6",        # Feature store
    "private-training-pipeline>=3.2.1",    # Training pipeline
    "org-model-registry==2.4.8",           # Model registry
    "enterprise-ml-ops>=1.9.5"             # MLOps platform
]

[project.urls]
Homepage = "https://github.com/testorg/dependency-confusion-test"
Documentation = "https://docs.testcompany.com/dependency-confusion-test"
Repository = "https://github.com/testorg/dependency-confusion-test.git"
"Bug Tracker" = "https://github.com/testorg/dependency-confusion-test/issues"

# Potentially hijackable GitHub URLs (should trigger GitHub repo hijacking detection)
"Internal Docs" = "https://github.com/defunct-company/internal-documentation"
"Legacy Tools" = "https://github.com/old-startup/legacy-utilities"
"Private Archive" = "https://github.com/missing-org/private-archive"

[project.scripts]
dep-test = "dependency_test.cli:main"
security-scan = "dependency_test.scanner:run"

[tool.setuptools]
package-dir = {"" = "src"}
include-package-data = true

[tool.setuptools.packages.find]
where = ["src"]
exclude = ["tests*"]

# Black code formatting configuration
[tool.black]
line-length = 88
target-version = ["py38", "py39", "py310", "py311"]
include = '\.pyi?$'

# Pytest configuration
[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]

# MyPy type checking configuration
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*", "*/test_*"]

# Custom tool configurations that might contain suspicious references
[tool.internal-deploy]
# This section might trigger additional security scans
registry_url = "https://pypi.internal-company.com/simple/"
backup_registry = "https://artifacts.legacy-corp.local/pypi/"
auth_token_file = "/opt/secrets/pypi-internal-token"

[tool.poetry.source]
# Alternative package sources (might trigger extra-index-url detection)
[[tool.poetry.source]]
name = "internal"
url = "https://pypi.internal-company.com/simple/"
secondary = true

[[tool.poetry.source]]
name = "legacy"
url = "https://packages.old-company.local/simple/"
secondary = true
